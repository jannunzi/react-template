[{"/Users/jannunzi/template-projects/react-template/src/index.js":"1","/Users/jannunzi/template-projects/react-template/src/reportWebVitals.js":"2","/Users/jannunzi/template-projects/react-template/src/App.js":"3","/Users/jannunzi/template-projects/react-template/src/components/session-attributes.js":"4","/Users/jannunzi/template-projects/react-template/src/components/generic/DataTable.js":"5","/Users/jannunzi/template-projects/react-template/src/components/generic/DataRecord.js":"6"},{"size":593,"mtime":1607657075284,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1607652957360,"results":"9","hashOfConfig":"8"},{"size":3304,"mtime":1608010504563,"results":"10","hashOfConfig":"8"},{"size":2862,"mtime":1607696908934,"results":"11","hashOfConfig":"8"},{"size":7607,"mtime":1608090665580,"results":"12","hashOfConfig":"8"},{"size":5030,"mtime":1608010977868,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"mgk8xv",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"16"},"/Users/jannunzi/template-projects/react-template/src/index.js",[],["29","30"],"/Users/jannunzi/template-projects/react-template/src/reportWebVitals.js",[],"/Users/jannunzi/template-projects/react-template/src/App.js",[],"/Users/jannunzi/template-projects/react-template/src/components/session-attributes.js",["31"],"import React, {useState, useEffect} from 'react'\n\nconst SessionAttributes = () => {\n\n  const [attribute1, setAttribute1] = useState(\"\")\n  const [value1, setValue1] = useState(\"\")\n\n  const [attribute2, setAttribute2] = useState(\"\")\n  const [value2, setValue2] = useState(\"\")\n\n  const [serverUrl, setServerUrl] = useState(\"\")\n\n  const setSessionAttributeInServer = (attribute, value) => {\n    fetch(`${serverUrl}/session/set/${attribute}/${value}`, {\n      credentials: \"include\"\n    })\n      .then(response => response.text())\n      .then(text => console.log(text))\n  }\n  const getSessionAttributeFromServer = (attribute) => {\n    fetch(`${serverUrl}/session/get/${attribute}`, {\n      credentials: \"include\"\n    })\n      .then(response => response.text())\n      .then(text => setValue2(text))\n  }\n\n  return(\n    <div>\n      <h1>Session Attributes</h1>\n      <hr/>\n      <h2>Server URL</h2>\n      <div className=\"row\">\n        <div className=\"col-12\">\n          <input\n            list=\"server-url\"\n            className=\"form-control\"\n            onChange={(event) => setServerUrl(event.target.value)}\n            value={serverUrl}/>\n          <datalist id=\"server-url\">\n            <option\n              value=\"http://spring-template-jga.herokuapp.com\"/>\n            <option\n              value=\"http://node-template-jga.herokuapp.com\"/>\n          </datalist>\n        </div>\n      </div>\n      <hr/>\n      <h2>Set Attribute</h2>\n      <div className=\"row\">\n        <div className=\"col-5\">\n          <input\n            value={attribute1}\n            onChange={(event) => setAttribute1(event.target.value)}\n            className=\"form-control\"/>\n        </div>\n        <div className=\"col-5\">\n          <input\n            value={value1}\n            onChange={(event) => setValue1(event.target.value)}\n            className=\"form-control\"/>\n        </div>\n        <div className=\"col-2\">\n          <button\n            onClick={() => setSessionAttributeInServer(attribute1, value1)}\n            className=\"btn btn-block btn-primary\">\n            Set Attribute\n          </button>\n        </div>\n      </div>\n      <hr/>\n      <h2>Get Attribute</h2>\n      <div className=\"row\">\n        <div className=\"col-5\">\n          <input\n            value={attribute2}\n            onChange={(event) => setAttribute2(event.target.value)}\n            className=\"form-control\"/>\n        </div>\n        <div className=\"col-5\">\n          <input\n            value={value2}\n            readOnly={true}\n            onChange={() => {}}\n            className=\"form-control\"/>\n        </div>\n        <div className=\"col-2\">\n          <button\n            onClick={() => getSessionAttributeFromServer(attribute2)}\n            className=\"btn btn-block btn-primary\">\n            Get Attribute\n          </button>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default SessionAttributes\n","/Users/jannunzi/template-projects/react-template/src/components/generic/DataTable.js",["32"],"/Users/jannunzi/template-projects/react-template/src/components/generic/DataRecord.js",["33"],"import React, {useState, useEffect} from \"react\";\nimport {Link} from \"react-router-dom\";\n\nexport const DataRecord = (\n  {\n    id = \"\",\n    pathIdIndex = 2,\n    table = {name: \"modules\", label: \"Modules\"},\n    primaryKey = \"_id\",\n    schema=[\n      {\n        name: \"title\",\n        type: \"String\",\n        label: \"Title\"\n      },\n      {\n        name: \"_id\",\n        type: \"String\",\n        label: \"ID\"\n      },\n      ],\n    newRecord={title: \"New Course\"},\n    neuid=\"jannunzi\",\n    match,\n    cancelLink,\n    cancelUrl\n  }) => {\n  const findRecordById = (id) =>\n    fetch(`https://wbdv-generic-server.herokuapp.com/api/${neuid}/${table.name}/${id}`, {\n      credentials: \"include\"\n    })\n      .then(response => response.json())\n\n  const [record, setRecord] = useState({})\n  useEffect(() => {\n    const pathname = window.location.pathname.split(\"/\")\n    debugger\n    if(pathIdIndex) {\n      const id = pathname[pathIdIndex]\n      findRecordById(id)\n        .then(record => setRecord(record))\n    } else if(id) {\n      findRecordById(id)\n        .then(record => setRecord(record))\n    } else if(match.params.id) {\n      findRecordById(id)\n        .then(record => setRecord(record))\n    } else {\n      const id = pathname[pathname.length - 1]\n      findRecordById(id)\n        .then(record => setRecord(record))\n    }\n  }, [])\n  return(\n    <>\n      <h1>{table.label}</h1>\n      <ul className=\"list-group\">\n        {\n          schema.map(field =>\n            <li key={field.name} className=\"list-group-item\">\n              <div className=\"row\">\n                <div className=\"col-2\">\n                  {field.label}\n                </div>\n                <div className=\"col-10\">\n                    {\n                      field.type === String && !field.enum &&\n                      <input\n                        onChange={(event) => {\n                          const value = event.target.value\n                          setRecord(prevRow => {\n                            let newRow = {...prevRow}\n                            newRow[field.name] = value\n                            return newRow\n                          })\n                        }}\n                        value={record[field.name]}\n                        className=\"form-control\"/>\n                    }\n                    {\n                      field.type === String && field.enum &&\n                      <select\n                        onChange={(event) => {\n                          const value = event.target.value\n                          setRecord(prevRow => {\n                            let newRow = {...prevRow}\n                            newRow[field.name] = value\n                            return newRow\n                          })\n                        }}\n                        value={record[field.name]}\n                        className=\"form-control\">\n                        <option></option>\n                        {\n                          field.enum.map(option =>\n                            <option key={option}>{option}</option>\n                          )\n                        }\n                      </select>\n                    }\n                    {\n                      field.type === Date &&\n                      <input\n                        onChange={(event) => {\n                          const value = event.target.value\n                          setRecord(prevRow => {\n                            let newRow = {...prevRow}\n                            newRow[field.name] = value\n                            return newRow\n                          })\n                        }}\n                        type=\"Date\"\n                        value={record[field.name]}\n                        className=\"form-control\"/>\n                    }\n                    {\n                      field.type === Number &&\n                      <input\n                        onChange={(event) => {\n                          const value = event.target.value\n                          setRecord(prevRow => {\n                            let newRow = {...prevRow}\n                            newRow[field.name] = value\n                            return newRow\n                          })\n                        }}\n                        type=\"Number\"\n                        value={record[field.name]}\n                        className=\"form-control\"/>\n                    }\n                </div>\n              </div>\n            </li>\n          )\n        }\n      </ul>\n      <button className=\"btn btn-danger\">Delete</button>\n      <button className=\"btn btn-success\">Save</button>\n      {\n        cancelLink &&\n          <Link to={cancelLink} className=\"btn btn-danger\">\n            Cancel\n          </Link>\n      }\n      {\n        !cancelLink && cancelUrl &&\n        <a href={cancelUrl} className=\"btn btn-danger\">\n        Cancel\n        </a>\n      }\n      <button className=\"btn btn-primary\">\n        Create\n      </button>\n      <button className=\"btn btn-primary\">\n        Search\n      </button>\n    </>\n  )\n}\n",{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":1,"column":26,"nodeType":"40","messageId":"41","endLine":1,"endColumn":35},{"ruleId":"42","severity":1,"message":"43","line":27,"column":6,"nodeType":"44","endLine":27,"endColumn":8,"suggestions":"45"},{"ruleId":"42","severity":1,"message":"46","line":53,"column":6,"nodeType":"44","endLine":53,"endColumn":8,"suggestions":"47"},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'neuid' and 'table.name'. Either include them or remove the dependency array.","ArrayExpression",["50"],"React Hook useEffect has missing dependencies: 'findRecordById', 'id', 'match.params.id', and 'pathIdIndex'. Either include them or remove the dependency array.",["51"],"no-global-assign","no-unsafe-negation",{"desc":"52","fix":"53"},{"desc":"54","fix":"55"},"Update the dependencies array to be: [neuid, table.name]",{"range":"56","text":"57"},"Update the dependencies array to be: [findRecordById, id, match.params.id, pathIdIndex]",{"range":"58","text":"59"},[825,827],"[neuid, table.name]",[1321,1323],"[findRecordById, id, match.params.id, pathIdIndex]"]